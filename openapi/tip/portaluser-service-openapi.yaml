openapi: 3.0.3
info:
  title: CloudSDK Portal User API
  description: APIs that provide services for viewing, updating and deleting various data elements of portal users.
  version: 1.0.0
servers:
  - url: https://localhost:9091
    description: Local Dev server
  - url: https://10.0.0.61:9091
    description: Local Dev server - all-in-one
  - url: https://192.168.0.143:9051
    description: Local Dev server - portal, prov, and ssc
    
tags:
- name: Data Model Overview
- name: Portal User Data
  
    
components:
  securitySchemes:
    tip_wlan_ts_auth:
      type: http
      scheme: bearer
      
  responses:
    GenericApiError:
      description: this object is returned in the cases when an API throws an exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JsonSerializedException'
            
  schemas:
    
#
#Generic data models used for many APIs
#
    GenericResponse:
      properties:
        message:
          type: string
        success:
          type: boolean
          
    JsonSerializedException:
      description: this object is returned in the cases when an API throws an exception
      properties:
        exType:
          type: string
          enum:
            - IllegalStateException
        error:
          description: error message
          type: string
        path:
          description: API path with parameters that produced the exception
          type: string
        timestamp:
          description: time stamp of when the exception was generated
          type: integer
          format: int64
          
#
# Portal User data models
#
    PortalUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
        customerId:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/PortalUserRole'
        createdTimestamp:
          type: integer
          format: int64
        lastModifiedTimestamp:
          description: must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database
          type: integer
          format: int64
      example:
        customerId: 2
        username: new_user
        password: pwd
        roles: [ "CustomerIT" ]
          
    PortalUserRole:
      type: string
      enum:
      - SuperUser
      - SuperUser_RO
      - CustomerIT
      - CustomerIT_RO
      - Distributor
      - Distributor_RO
      - ManagedServiceProvider
      - ManagedServiceProvider_RO
      - TechSupport
      - TechSupport_RO
      - Public
 
#
# Objects for pagination
#
    SortOrder:
      type: string
      default: asc
      enum:
      - asc
      - desc
      
    SortColumnsPortalUser:
      type: object
      required:
      - model_type
      - columnName
      - sortOrder
      properties: 
        model_type:
          type: string
          enum:
          - ColumnAndSort
        columnName:
          type: string
          default: id
          enum: 
          - id
          - username
        sortOrder:
          $ref: '#/components/schemas/SortOrder'
          
    PaginationContextPortalUser:
      type: object
      required: 
      - maxItemsPerPage
      properties:
        model_type:
          type: string
          enum:
          - PaginationContext
        maxItemsPerPage:
          type: integer
          format: int32
          default: 20
        lastReturnedPageNumber:
          type: integer
          format: int32
        totalItemsReturned:
          type: integer
          format: int32
        lastPage:
          type: boolean
        cursor:
          type: string
      example: 
        model_type: PaginationContext
        maxItemsPerPage: 10
          
      
    PaginationResponsePortalUser:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PortalUser'
        context:
          $ref: '#/components/schemas/PaginationContextPortalUser' 
##-------------------------------------------------------------------------
security:
 - tip_wlan_ts_auth: []
paths:
    
  /api/portalUser:
    post:
      tags:
      - Portal User Data
      summary: Creates new portal user record
      operationId: createPortalUserRecord
      requestBody:
        description: Portal user record
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortalUser'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalUser'
        500: 
          $ref: '#/components/responses/GenericApiError'
    put:
      tags:
      - Portal User Data
      summary: Updates portal user record
      operationId: updatePortalUserRecord
      requestBody:
        description: Portal user record
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortalUser'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalUser'
        500: 
          $ref: '#/components/responses/GenericApiError'
    delete:
      tags:
      - Portal User Data
      summary: Deletes portal user record
      operationId: deletePortalUserById
      parameters:
      - name: portalUserId
        in: query
        description: Portal User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalUser'
        500: 
          $ref: '#/components/responses/GenericApiError'
    get:
      tags:
      - Portal User Data
      summary: Gets portal user record
      operationId: getPortalUserById
      parameters:
      - name: portalUserId
        in: query
        description: Portal User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalUser'
        500:
          $ref: '#/components/responses/GenericApiError'
    
  /api/portalUser/orNull:
    get:
      tags:
      - Portal User Data
      summary: Gets portal user record else null
      operationId: getPortalUserByIdOrNull
      parameters:
      - name: portalUserId
        in: query
        description: Portal User ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalUser'
        500:
          $ref: '#/components/responses/GenericApiError'
          
  /api/portalUser/byUsernameOrNull:
    get:
      tags:
      - Portal User Data
      summary: Gets portal user record by username
      operationId: getPortalUserByUsername
      parameters:
      - name: customerId
        in: query
        description: Customer ID
        required: true
        schema:
          type: integer
          format: int32
      - name: username
        in: query
        description: username
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalUser'
        500:
          $ref: '#/components/responses/GenericApiError'
          
  /api/portalUser/usersForUsername:
    get:
      tags:
      - Portal User Data
      summary: Gets list of Portal Users by username
      operationId: getUsersForUsername
      parameters:
      - name: username
        in: query
        description: username
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortalUser'
        500:
          $ref: '#/components/responses/GenericApiError'
          
  /api/portalUser/inSet:  
    get:
      tags:
      - Portal User Data
      summary: Gets portal user record set
      operationId: getClientSetById
      parameters:
      - name: portalUserIdSet
        in: query
        description: Portal User ID set
        required: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortalUser'
        500: 
          $ref: '#/components/responses/GenericApiError'
          
  /api/portalUser/forCustomer:  
    get:
      tags:
      - Portal User Data
      summary: Gets portal user record for customer
      operationId: getPortalUserRecordForCustomer
      parameters:
      - name: customerId
        in: query
        description: Customer ID
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        description: sort options
        required: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/SortColumnsPortalUser'
      - name: paginationContext
        in: query
        description: pagination context
        required: false
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/PaginationContextPortalUser'
            examples:
              initialPginationContext:
                value:
                  model_type: PaginationContext
                  maxItemsPerPage: 10
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponsePortalUser'
        500: 
          $ref: '#/components/responses/GenericApiError'
          
 
 
 
 
 
 
 
 
 

