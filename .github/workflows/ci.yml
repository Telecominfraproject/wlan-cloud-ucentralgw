name: Build Docker image

on:
  push:
    paths-ignore:
      - 'openapi/**'
      - '**.md'
    branches:
      - kinara
      - 'release/*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - kinara
      - 'release/*'

defaults:
  run:
    shell: bash

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 471112855615.dkr.ecr.us-east-1.amazonaws.com
      ECR_REPOSITORY: owgw
      AWS_REGION: us-east-1

    steps:
      # may attempt to put the following code in common area.
      # not really that useful if I have to have secrets in every repo anyways
      #- name: Checkout actions repo
      #  uses: actions/checkout@v3
      #  with:
      #    repository: kinarasystems/.github
      #    path: github
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: docker-image-build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to EKS.
          cd docker-image-build
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          if [[ "$GITHUB_REF" == "refs/heads/kinara" ]] ; then
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          fi
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Notify via Teams
        #if: failure() && github.ref == 'refs/heads/kinara'
        if: always()
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.MS_TEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          dry_run: False

#  trigger-deploy-to-dev:
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/kinara'
#    needs:
#      - docker
#    steps:
#    - name: Checkout actions repo
#      uses: actions/checkout@v3
#      with:
#        repository: Telecominfraproject/.github
#        path: github
#
#    - name: Trigger deployment of the latest version to dev instance and wait for result
#      uses: ./github/composite-actions/trigger-workflow-and-wait
#      with:
#        owner: Telecominfraproject
#        repo: wlan-testing
#        workflow: ucentralgw-dev-deployment.yaml
#        token: ${{ secrets.WLAN_TESTING_PAT }}
#        ref: master
#        inputs: '{"force_latest": "true"}'
