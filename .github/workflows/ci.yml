name: Build Docker image

on:
  push:
    paths-ignore:
      - 'openapi/**'
      - '**.md'
      - 'version'
      - 'package*.json'
      - 'helm/*.yaml'
      - 'CMakeLists.txt'
    branches:
      - kinara
  pull_request:
    branches:
      - kinara

defaults:
  run:
    shell: bash

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 471112855615.dkr.ecr.us-east-1.amazonaws.com
      ECR_REPOSITORY: owgw
      AWS_REGION: us-east-1

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          path: build
          token: ${{ secrets.GIT_PUSH_PAT }}
          persist-credentials: true

      - name: Checkout dot github repo
        uses: actions/checkout@v4
        with:
          repository: kinarasystems/.github
          ref: main
          path: tools
          token: ${{ secrets.GIT_PUSH_PAT }}

      - name: Bump version and checkin
        if: github.ref == 'refs/heads/kinara'
        id: bump-version
        run: |
          cd build
          ../tools/utils/setup-git-credentials "${{ secrets.GIT_PUSH_PAT}}"
          ../tools/utils/ver-bump -b -a -p -V kv -y helm/Chart.yaml -Y helm/values.yaml -M CMakeLists.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          cd build
          version=$(cat version)
          ../tools/utils/docker_build \
              -m kinara \
              -b "$GITHUB_REF" \
              -t "$IMAGE_TAG" \
              -r "$ECR_REGISTRY/$ECR_REPOSITORY" \
              -v "kv${version}"

      - name: Notify via Teams
        #if: failure() && github.ref == 'refs/heads/kinara'
        if: always()
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.MS_TEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          dry_run: False

  deploy-to-dev1:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      DEPLOY_NAME: owgw
      HOSTNAME: dev1.dev.kinsights.io
      NAMESPACE: openlan
    needs:
      - docker
    steps:
      - name: Set up SSH key
        run: |
          echo "${{ secrets.PRIVATE_SSH_KEY }}" > .ssh_host_key
          chmod 600 .ssh_host_key
      - name: Rolling update of deployment
        run: |
          ssh -i .ssh_host_key \
            -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" \
            ubuntu@${{ env.HOSTNAME }} \
            kubectl rollout restart deployment/${{ env.DEPLOY_NAME }} -n ${{ env.NAMESPACE }}

  # OLD EKS method - disabled via if:
  deploy-to-dev-old-eks:
    runs-on: ubuntu-latest
    if: false
    env:
      DEPLOY_NAME: owgw
      AWS_DEFAULT_REGION: us-east-1
      AWS_NAMESPACE: kic-dev1
      AWS_EKS_NAME: kinara-dev
      KUBECTL_VERSION: "v1.27.14"
    needs:
      - docker
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Fetch kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.AWS_EKS_NAME }} --region ${{ env.AWS_DEFAULT_REGION }}

      - name: Install kubectl
        run: |
          curl -s -LO "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Rolling update of deployment
        run: |
          kubectl rollout restart deployment/${{ env.DEPLOY_NAME }} -n ${{ env.AWS_NAMESPACE }}
